<?php
/**
 * Plugin Name: System rezerwacji lotów tandemowych
 * Description: Plugin do rezerwacji lotów tandemowych w WooCommerce.
 * Version: 1.1
 * Author: Autogenerated
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Definicje stałych
define('SRL_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('SRL_PLUGIN_URL', plugin_dir_url(__FILE__));

// Dołączanie plików
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-menu.php';
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-calendar.php';
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-day.php';
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-voucher.php';
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-vouchers.php';
require_once SRL_PLUGIN_DIR . 'includes/admin/admin-flights.php';
require_once SRL_PLUGIN_DIR . 'includes/frontend/frontend-shortcodes.php';
require_once SRL_PLUGIN_DIR . 'includes/frontend/frontend-reservation.php';
require_once SRL_PLUGIN_DIR . 'includes/voucher-functions.php';
require_once SRL_PLUGIN_DIR . 'includes/client-account.php';
require_once SRL_PLUGIN_DIR . 'includes/woocommerce-integration.php';
require_once SRL_PLUGIN_DIR . 'includes/voucher-gift-functions.php';
require_once SRL_PLUGIN_DIR . 'includes/flight-options.php';
require_once SRL_PLUGIN_DIR . 'includes/cart-flight-options.php';
require_once SRL_PLUGIN_DIR . 'includes/product-flight-options.php';

// Aktywacja wtyczki - tworzenie tabel
function srl_aktywacja_wtyczki() {
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();

    // Tabela terminów
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    $sql_terminy = "CREATE TABLE $tabela_terminy (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        data DATE NOT NULL,
        pilot_id tinyint(2) NOT NULL,
        godzina_start TIME NOT NULL,
        godzina_koniec TIME NOT NULL,
        status ENUM('Wolny','Prywatny','Zarezerwowany','Zrealizowany','Odwołany przez klienta','Odwołany przez organizatora') DEFAULT 'Wolny' NOT NULL,
        klient_id bigint(20) NULL,
        PRIMARY KEY  (id),
        KEY data (data),
        KEY pilot_id (pilot_id)
    ) $charset_collate;";

    // Tabela voucherów
    $tabela_vouchery = $wpdb->prefix . 'srl_vouchery';
    $sql_vouchery = "CREATE TABLE $tabela_vouchery (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        kod_vouchera varchar(12) NOT NULL,
        status ENUM('Oczekuje','Zatwierdzony','Odrzucony','Zrealizowany') DEFAULT 'Oczekuje' NOT NULL,
        data_zgloszenia DATETIME NOT NULL,
        zrodlo varchar(255),
        klient_id bigint(20) NULL,
        PRIMARY KEY  (id),
        UNIQUE KEY kod_vouchera (kod_vouchera)
    ) $charset_collate;";

    // Tabela zakupionych lotów
    $tabela_zakupione_loty = $wpdb->prefix . 'srl_zakupione_loty';
    $sql_zakupione_loty = "CREATE TABLE $tabela_zakupione_loty (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        order_item_id bigint(20) NOT NULL,
        order_id bigint(20) NOT NULL,
        user_id bigint(20) NOT NULL,
        imie varchar(100) NOT NULL,
        nazwisko varchar(100) NOT NULL,
        nazwa_produktu varchar(255) NOT NULL,
        status ENUM('wolny','zarezerwowany','zrealizowany','przedawniony') DEFAULT 'wolny' NOT NULL,
        data_zakupu DATETIME NOT NULL,
        data_waznosci DATE NOT NULL,
        data_rezerwacji DATETIME NULL,
        termin_id mediumint(9) NULL,
        PRIMARY KEY (id),
        KEY order_item_id (order_item_id),
        KEY user_id (user_id),
        KEY status (status),
        KEY data_waznosci (data_waznosci)
    ) $charset_collate;";

    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
	dbDelta($sql_terminy);
	dbDelta($sql_vouchery);
	dbDelta($sql_zakupione_loty);

	// Uruchom aktualizację bazy
	srl_aktualizuj_baze();

	// Utwórz domyślne dane
	srl_utworz_kategorie_produktow();
	srl_utworz_strone_rezerwacji();
	srl_dodaj_endpointy();
	flush_rewrite_rules();

	// Wymuś aktualizację bazy przy każdej aktywacji
	update_option('srl_db_version', '1.0'); // Resetuj wersję aby wymusić aktualizację
	
	// Włącz rejestrację użytkowników jeśli jest wyłączona
	if (!get_option('users_can_register')) {
		update_option('users_can_register', 1);
	}
	
	
}
register_activation_hook(__FILE__, 'srl_aktywacja_wtyczki');

// Dezaktywacja wtyczki
function srl_dezaktywacja_wtyczki() {
    // Wyczyść zaplanowane zadania
    wp_clear_scheduled_hook('srl_sprawdz_przeterminowane_loty');
}
register_deactivation_hook(__FILE__, 'srl_dezaktywacja_wtyczki');

// Funkcja czyszczenia uszkodzonej tabeli voucherów
function srl_cleanup_voucher_table() {
    global $wpdb;
    $tabela_vouchery_upominkowe = $wpdb->prefix . 'srl_vouchery_upominkowe';
    
    // Sprawdź czy tabela istnieje
    $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$tabela_vouchery_upominkowe'") == $tabela_vouchery_upominkowe;
    
    if ($table_exists) {
        // Usuń uszkodzoną tabelę
        $wpdb->query("DROP TABLE IF EXISTS $tabela_vouchery_upominkowe");
        error_log('SRL: Usunięto uszkodzoną tabelę voucherów');
    }
}

// Funkcja aktualizacji bazy
function srl_aktualizuj_baze() {
    global $wpdb;
    
    // Sprawdź wersję bazy
    $current_version = get_option('srl_db_version', '1.0');
    
    if (version_compare($current_version, '1.1', '<')) {
        // Aktualizacja do wersji 1.1 - dodaj nowe statusy do tabeli terminów
        $tabela_terminy = $wpdb->prefix . 'srl_terminy';
        
        $wpdb->query("ALTER TABLE $tabela_terminy MODIFY COLUMN status ENUM('Wolny','Prywatny','Zarezerwowany','Zrealizowany','Odwołany przez klienta','Odwołany przez organizatora') DEFAULT 'Wolny' NOT NULL");
        
        update_option('srl_db_version', '1.1');
    }
    
    if (version_compare($current_version, '1.2', '<')) {
        // Aktualizacja do wersji 1.2 - dodaj kolumnę dane_pasazera do tabeli zakupionych lotów
        $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
        
        // Sprawdź czy kolumna już istnieje
        $kolumna_istnieje = $wpdb->get_results("SHOW COLUMNS FROM $tabela_loty LIKE 'dane_pasazera'");
        
        if (empty($kolumna_istnieje)) {
            $wpdb->query("ALTER TABLE $tabela_loty ADD COLUMN dane_pasazera TEXT NULL AFTER termin_id");
        }
        
        update_option('srl_db_version', '1.2');
    }
	
if (version_compare($current_version, '1.3', '<')) {
    // Aktualizacja do wersji 1.3 - dodaj tabelę voucherów upominkowych
    $tabela_vouchery_upominkowe = $wpdb->prefix . 'srl_vouchery_upominkowe';
    
    // Sprawdź czy tabela już istnieje
    $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$tabela_vouchery_upominkowe'") == $tabela_vouchery_upominkowe;
    
    if (!$table_exists) {
        $sql_vouchery_upominkowe = "CREATE TABLE $tabela_vouchery_upominkowe (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            order_item_id bigint(20) NOT NULL,
            order_id bigint(20) NOT NULL,
            buyer_user_id bigint(20) NOT NULL,
            buyer_imie varchar(100) NOT NULL,
            buyer_nazwisko varchar(100) NOT NULL,
            nazwa_produktu varchar(255) NOT NULL,
            kod_vouchera varchar(10) NOT NULL,
            status ENUM('do_wykorzystania','wykorzystany','przeterminowany') DEFAULT 'do_wykorzystania' NOT NULL,
            data_zakupu DATETIME NOT NULL,
            data_waznosci DATE NOT NULL,
            data_wykorzystania DATETIME NULL,
            wykorzystany_przez_user_id bigint(20) NULL,
            lot_id mediumint(9) NULL,
            PRIMARY KEY (id),
            UNIQUE KEY unique_kod_vouchera (kod_vouchera),
            KEY idx_order_item_id (order_item_id),
            KEY idx_buyer_user_id (buyer_user_id),
            KEY idx_status (status),
            KEY idx_data_waznosci (data_waznosci),
            KEY idx_wykorzystany_przez_user_id (wykorzystany_przez_user_id)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql_vouchery_upominkowe);
        
        error_log('SRL: Tabela voucherów utworzona w wersji 1.3');
    }
    
    update_option('srl_db_version', '1.3');
}

if (version_compare($current_version, '1.4', '<')) {
    // Aktualizacja do wersji 1.4 - dodaj kolumny opcji do tabeli lotów
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Sprawdź czy kolumny już istnieją
    $kolumny = $wpdb->get_results("SHOW COLUMNS FROM $tabela_loty");
    $existing_columns = array();
    foreach ($kolumny as $kolumna) {
        $existing_columns[] = $kolumna->Field;
    }
    
    if (!in_array('ma_filmowanie', $existing_columns)) {
        $wpdb->query("ALTER TABLE $tabela_loty ADD COLUMN ma_filmowanie TINYINT(1) DEFAULT 0 AFTER dane_pasazera");
    }
    
    if (!in_array('ma_akrobacje', $existing_columns)) {
        $wpdb->query("ALTER TABLE $tabela_loty ADD COLUMN ma_akrobacje TINYINT(1) DEFAULT 0 AFTER ma_filmowanie");
    }
    
    if (!in_array('historia_modyfikacji', $existing_columns)) {
        $wpdb->query("ALTER TABLE $tabela_loty ADD COLUMN historia_modyfikacji TEXT NULL AFTER ma_akrobacje");
    }
    	
    update_option('srl_db_version', '1.4');
}

if (version_compare($current_version, '1.5', '<')) {
    // Aktualizacja do wersji 1.5 - dodaj kolumnę notatka do terminów
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    
    $kolumna_istnieje = $wpdb->get_results("SHOW COLUMNS FROM $tabela_terminy LIKE 'notatka'");
    
    if (empty($kolumna_istnieje)) {
        $wpdb->query("ALTER TABLE $tabela_terminy ADD COLUMN notatka TEXT NULL AFTER klient_id");
    }
    
    update_option('srl_db_version', '1.5');
}

if (version_compare($current_version, '1.6', '<')) {
    // Aktualizacja do wersji 1.6 - dodaj kolumnę notatka do terminów (jeśli nie istnieje)
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    
    $kolumna_istnieje = $wpdb->get_results("SHOW COLUMNS FROM $tabela_terminy LIKE 'notatka'");
    
    if (empty($kolumna_istnieje)) {
        $wpdb->query("ALTER TABLE $tabela_terminy ADD COLUMN notatka TEXT NULL AFTER klient_id");
    }
    
    update_option('srl_db_version', '1.6');
}



}

// Automatyczne tworzenie kategorii przy aktywacji
function srl_utworz_kategorie_produktow() {
    if (!term_exists('loty-tandemowe', 'product_cat')) {
        wp_insert_term(
            'Loty tandemowe',
            'product_cat',
            array(
                'description' => 'Produkty lotów tandemowych',
                'slug' => 'loty-tandemowe'
            )
        );
    }
}

// Automatyczne tworzenie strony rezerwacji
function srl_utworz_strone_rezerwacji() {
    $strona_istnieje = get_page_by_path('rezerwuj-lot');
    
    if (!$strona_istnieje) {
        $strona_id = wp_insert_post(array(
            'post_title' => 'Rezerwuj lot',
            'post_content' => '[srl_kalendarz]',
            'post_status' => 'publish',
            'post_type' => 'page',
            'post_name' => 'rezerwuj-lot'
        ));
        
        update_option('srl_strona_rezerwacji_id', $strona_id);
    }
}

// Rejestracja AJAX handlerów dla panelu administracyjnego
add_action('wp_ajax_srl_dodaj_godzine',        'srl_dodaj_godzine');
add_action('wp_ajax_srl_zmien_slot',           'srl_zmien_slot');
add_action('wp_ajax_srl_usun_godzine',         'srl_usun_godzine');
add_action('wp_ajax_srl_zmien_status_godziny', 'srl_zmien_status_godziny');
add_action('wp_ajax_srl_anuluj_lot_przez_organizatora', 'srl_anuluj_lot_przez_organizatora');
add_action('wp_ajax_srl_wyszukaj_klientow_loty', 'srl_wyszukaj_klientow_loty');

/**
 * AJAX: Dodaje nowy slot do bazy
 */
function srl_dodaj_godzine() {
    // Sprawdź uprawnienia
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    // Sprawdź nonce dla bezpieczeństwa
    if (!isset($_POST['data']) || !isset($_POST['pilot_id'])) {
        wp_send_json_error('Nieprawidłowe dane.');
        return;
    }

    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_terminy';

    $data       = sanitize_text_field($_POST['data']);
    $pilot_id   = intval($_POST['pilot_id']);
    $godzStart  = sanitize_text_field($_POST['godzina_start']) . ':00';
    $godzKoniec = sanitize_text_field($_POST['godzina_koniec']) . ':00';
    $status     = sanitize_text_field($_POST['status']);
    $klient_id  = 0;

    // Walidacja danych
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $data)) {
        wp_send_json_error('Nieprawidłowy format daty.');
        return;
    }

    if ($pilot_id < 1 || $pilot_id > 4) {
        wp_send_json_error('Nieprawidłowy ID pilota.');
        return;
    }

    // Wstaw do bazy
    $result = $wpdb->insert(
        $tabela,
        array(
            'data'           => $data,
            'pilot_id'       => $pilot_id,
            'godzina_start'  => $godzStart,
            'godzina_koniec' => $godzKoniec,
            'status'         => $status,
            'klient_id'      => $klient_id
        ),
        array('%s','%d','%s','%s','%s','%d')
    );
    
    if ($result === false) {
        wp_send_json_error('Nie udało się zapisać slotu: ' . $wpdb->last_error);
        return;
    }
    
    // Pobierz odświeżone dane
    srl_zwroc_godziny_wg_pilota($data);
}

/**
 * AJAX: Zmienia dane slotu (godziny, status, klient_id)
 */
function srl_zmien_slot() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    if (!isset($_POST['termin_id'])) {
        wp_send_json_error('Nieprawidłowe dane.');
        return;
    }

    global $wpdb;
    $tabela    = $wpdb->prefix . 'srl_terminy';
    $termin_id = intval($_POST['termin_id']);
    $data      = sanitize_text_field($_POST['data']);
    $godzStart = sanitize_text_field($_POST['godzina_start']) . ':00';
    $godzKoniec= sanitize_text_field($_POST['godzina_koniec']) . ':00';
    $status    = sanitize_text_field($_POST['status']);
    $klient_id = isset($_POST['klient_id']) ? intval($_POST['klient_id']) : 0;

    // Sprawdź czy slot istnieje
    $existing = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $tabela WHERE id = %d",
        $termin_id
    ));

    if (!$existing) {
        wp_send_json_error('Slot nie istnieje.');
        return;
    }

    $dane = array(
        'godzina_start'  => $godzStart,
        'godzina_koniec' => $godzKoniec,
        'status'         => $status,
        'klient_id'      => $klient_id ? $klient_id : null
    );
    
    $wynik = $wpdb->update(
        $tabela,
        $dane,
        array('id' => $termin_id),
        array('%s','%s','%s','%d'),
        array('%d')
    );
    
    if ($wynik === false) {
        wp_send_json_error('Błąd aktualizacji w bazie: ' . $wpdb->last_error);
        return;
    }
    
    // Zwrot odświeżonych danych
    srl_zwroc_godziny_wg_pilota($data);
}

/**
 * AJAX: Usuwa pojedynczy slot
 */
function srl_usun_godzine() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    if (!isset($_POST['termin_id'])) {
        wp_send_json_error('Nieprawidłowe dane.');
        return;
    }

    global $wpdb;
    $tabela    = $wpdb->prefix . 'srl_terminy';
    $termin_id = intval($_POST['termin_id']);

    // Pobierz informacje o slocie przed usunięciem
    $slot = $wpdb->get_row($wpdb->prepare(
        "SELECT data, status, klient_id FROM $tabela WHERE id = %d",
        $termin_id
    ), ARRAY_A);
    
    if (!$slot) {
        wp_send_json_error('Slot nie istnieje.');
        return;
    }

    // Sprawdź czy slot można usunąć (np. czy nie jest zarezerwowany)
    if ($slot['status'] === 'Zarezerwowany' && intval($slot['klient_id']) > 0) {
        wp_send_json_error('Nie można usunąć zarezerwowanego slotu. Najpierw wypisz klienta.');
        return;
    }

    $data = $slot['data'];

    // Usuń slot
    $usun = $wpdb->delete(
        $tabela, 
        array('id' => $termin_id), 
        array('%d')
    );
    
    if ($usun === false) {
        wp_send_json_error('Błąd usuwania z bazy: ' . $wpdb->last_error);
        return;
    }

    if ($usun === 0) {
        wp_send_json_error('Slot nie został usunięty (może już nie istnieje).');
        return;
    }
    
    // Zwrot odświeżonych danych
    srl_zwroc_godziny_wg_pilota($data);
}

/**
 * AJAX: Zmienia jedynie status slotu
 */
function srl_zmien_status_godziny() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    if (!isset($_POST['termin_id']) || !isset($_POST['status'])) {
        wp_send_json_error('Nieprawidłowe dane.');
        return;
    }

    global $wpdb;
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    $termin_id = intval($_POST['termin_id']);
    $status = sanitize_text_field($_POST['status']);
    $klient_id = isset($_POST['klient_id']) ? intval($_POST['klient_id']) : 0;

    // Jeśli status to „Odwołany przez organizatora", delegujemy do srl_anuluj_lot_przez_organizatora
    if ($status === 'Odwołany przez organizatora') {
        srl_anuluj_lot_przez_organizatora();
        return;
    }

    // Sprawdź czy slot istnieje
    $slot = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $tabela_terminy WHERE id = %d",
        $termin_id
    ), ARRAY_A);

    if (!$slot) {
        wp_send_json_error('Slot nie istnieje.');
        return;
    }

    // Walidacja statusu
    $dozwolone_statusy = ['Wolny', 'Prywatny', 'Zarezerwowany', 'Zrealizowany', 'Odwołany przez klienta'];
    if (!in_array($status, $dozwolone_statusy)) {
        wp_send_json_error('Nieprawidłowy status.');
        return;
    }

    // Znajdź powiązany lot
    $lot = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $tabela_loty WHERE termin_id = %d",
        $termin_id
    ), ARRAY_A);

    // Rozpocznij transakcję
    $wpdb->query('START TRANSACTION');

    try {
        // Aktualizuj slot
        $dane_slotu = array(
            'status' => $status,
            'klient_id' => $klient_id ? $klient_id : null
        );
        
        $wynik = $wpdb->update(
            $tabela_terminy,
            $dane_slotu,
            array('id' => $termin_id),
            array('%s','%d'),
            array('%d')
        );
        
        if ($wynik === false) {
            throw new Exception('Błąd aktualizacji statusu slotu');
        }

        // Synchronizuj status lotu jeśli istnieje
        if ($lot) {
            $nowy_status_lotu = '';
            $dane_lotu_update = array();
            
            switch ($status) {
                case 'Wolny':
                    $nowy_status_lotu = 'wolny';
                    $dane_lotu_update = array(
                        'status' => $nowy_status_lotu,
                        'termin_id' => null,
                        'data_rezerwacji' => null
                    );
                    break;
                    
                case 'Zarezerwowany':
                    $nowy_status_lotu = 'zarezerwowany';
                    $dane_lotu_update = array(
                        'status' => $nowy_status_lotu
                    );
                    break;
                    
                case 'Zrealizowany':
                    $nowy_status_lotu = 'zrealizowany';
                    $dane_lotu_update = array(
                        'status' => $nowy_status_lotu
                    );
                    // NIE usuwamy termin_id ani data_rezerwacji dla zrealizowanych
                    break;
                    
                case 'Odwołany przez klienta':
                    $nowy_status_lotu = 'wolny';
                    $dane_lotu_update = array(
                        'status' => $nowy_status_lotu,
                        'termin_id' => null,
                        'data_rezerwacji' => null
                    );
                    break;
            }
            
            if (!empty($dane_lotu_update)) {
                $update_result = $wpdb->update(
                    $tabela_loty,
                    $dane_lotu_update,
                    array('id' => $lot['id']),
                    array_fill(0, count($dane_lotu_update), '%s'),
                    array('%d')
                );
                
                if ($update_result === false) {
                    throw new Exception('Błąd aktualizacji statusu lotu');
                }
            }
        }
        
        // Zatwierdź transakcję
        $wpdb->query('COMMIT');
        
        // Zwrot odświeżonych danych
        srl_zwroc_godziny_wg_pilota($slot['data']);
        
    } catch (Exception $e) {
        $wpdb->query('ROLLBACK');
        wp_send_json_error($e->getMessage());
    }
}

/**
 * AJAX: Gdy admin zmieni status na „Odwołany przez organizatora"
 */
function srl_anuluj_lot_przez_organizatora() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    if (!isset($_POST['termin_id'])) {
        wp_send_json_error('Nieprawidłowe dane.');
        return;
    }

    global $wpdb;
    $tabela     = $wpdb->prefix . 'srl_terminy';
    $termin_id  = intval($_POST['termin_id']);

    // Pobierz szczegóły slotu
    $slot = $wpdb->get_row($wpdb->prepare(
        "SELECT data, klient_id, godzina_start FROM $tabela WHERE id = %d",
        $termin_id
    ), ARRAY_A);
    
    if (!$slot) {
        wp_send_json_error('Slot nie istnieje.');
        return;
    }
    
    $data       = $slot['data'];
    $klient_id  = intval($slot['klient_id']);
    $data_lotu  = $slot['data'] . ' ' . substr($slot['godzina_start'], 0,5);

    // 1) Zaktualizuj slot: status → Wolny, klient_id → NULL
    $result = $wpdb->update(
        $tabela,
        array(
            'status'    => 'Wolny',
            'klient_id' => null
        ),
        array('id' => $termin_id),
        array('%s', '%d'),
        array('%d')
    );

    if ($result === false) {
        wp_send_json_error('Błąd aktualizacji slotu: ' . $wpdb->last_error);
        return;
    }

    // 2) Jeżeli był przypisany klient_id, wyślij e-mail i przywróć mu lot
    if ($klient_id > 0) {
        $user = get_userdata($klient_id);
        if ($user) {
            // Wyślij maila
            $to      = $user->user_email;
            $subject = 'Twój lot tandemowy został odwołany przez organizatora';
            $body    = "Dzień dobry {$user->display_name},\n\n"
                     . "Niestety Twój lot, który był zaplanowany na {$data_lotu}, został odwołany przez organizatora.\n"
                     . "Status Twojego lotu został przywrócony – możesz ponownie wybrać inny termin.\n\n"
                     . "Pozdrawiamy,\nZespół Loty Tandemowe";
            wp_mail($to, $subject, $body);

            // Przywróć klientowi lot do realizacji - znajdź lot w tabeli i zmień status
            $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
            $wpdb->update(
                $tabela_loty,
                array('status' => 'wolny', 'termin_id' => null, 'data_rezerwacji' => null),
                array('user_id' => $klient_id, 'termin_id' => $termin_id),
                array('%s', '%d', '%s'),
                array('%d', '%d')
            );
        }
    }

    // 3) Zwrot odświeżonych danych
    srl_zwroc_godziny_wg_pilota($data);
}

/**
 * AJAX: Wyszukuje klientów, którzy mają dostępne loty
 */
function srl_wyszukaj_klientow_loty() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }

    if (!isset($_GET['q'])) {
        wp_send_json_error('Brak frazy wyszukiwania.');
        return;
    }

    $search = sanitize_text_field($_GET['q']);
    
    if (strlen($search) < 2) {
        wp_send_json_success(array());
        return;
    }

    global $wpdb;
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Wyszukaj użytkowników z dostępnymi lotami
    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT DISTINCT u.ID, u.display_name, u.user_login 
         FROM {$wpdb->users} u
         INNER JOIN $tabela_loty zl ON u.ID = zl.user_id
         WHERE zl.status = 'wolny' 
         AND zl.data_waznosci >= CURDATE()
         AND (u.display_name LIKE %s OR u.user_login LIKE %s OR u.user_email LIKE %s)
         ORDER BY u.display_name
         LIMIT 10",
        '%' . $search . '%',
        '%' . $search . '%', 
        '%' . $search . '%'
    ));
    
    $wynik = array();
    foreach ($results as $user) {
        $wynik[] = array(
            'id'    => $user->ID,
            'nazwa' => $user->display_name . ' (' . $user->user_login . ')'
        );
    }
    
    wp_send_json_success($wynik);
}

/**
 * Pomocnicza funkcja AJAX: pobiera wszystkie sloty dla danego dnia i zwraca JSON
 * POPRAWIONA WERSJA - uwzględnia kolumnę notatka
 */
function srl_zwroc_godziny_wg_pilota($data) {
    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_terminy';
    
    $wynik = $wpdb->get_results($wpdb->prepare(
        "SELECT t.id, t.pilot_id, t.godzina_start, t.godzina_koniec, t.status, t.klient_id, t.notatka,
                zl.id as lot_id, zl.user_id as lot_user_id, zl.status as lot_status, zl.dane_pasazera
           FROM $tabela t
           LEFT JOIN {$wpdb->prefix}srl_zakupione_loty zl ON t.id = zl.termin_id
          WHERE t.data = %s
          ORDER BY t.pilot_id ASC, t.godzina_start ASC",
        sanitize_text_field($data)
    ), ARRAY_A);

    $noweWgPilota = array();
    foreach ($wynik as $w) {
        $pid = intval($w['pilot_id']);
        if (!isset($noweWgPilota[$pid])) {
            $noweWgPilota[$pid] = array();
        }
        
        // Pobierz dane klienta, jeśli slot ma przypisanego klienta
        $klient_nazwa = '';
        $link_zamowienia = '';
        $dane_pasazera_cache = null;
        
        if (($w['status'] === 'Zarezerwowany' || $w['status'] === 'Zrealizowany') && intval($w['klient_id']) > 0) {
            $user = get_userdata(intval($w['klient_id']));
            if ($user) {
                // Pobierz imię i nazwisko z meta danych użytkownika
                $imie = get_user_meta(intval($w['klient_id']), 'srl_imie', true);
                $nazwisko = get_user_meta(intval($w['klient_id']), 'srl_nazwisko', true);
                
                if ($imie && $nazwisko) {
                    $klient_nazwa = $imie . ' ' . $nazwisko;
                } else {
                    // Fallback na display_name jeśli brak danych w meta
                    $klient_nazwa = $user->display_name;
                }
                $link_zamowienia = admin_url('edit.php?post_type=shop_order&customer=' . intval($w['klient_id']));
                
                // NOWE: Pobierz pełne dane pasażera dla harmonogramu
                $dane_pasazera_cache = array();
                
                // Sprawdź czy są dane w kolumnie dane_pasazera lotu
                if (!empty($w['dane_pasazera'])) {
                    $dane_z_lotu = json_decode($w['dane_pasazera'], true);
                    if ($dane_z_lotu && is_array($dane_z_lotu)) {
                        $dane_pasazera_cache = $dane_z_lotu;
                    }
                }
                
                // Jeśli brak danych w locie, pobierz z profilu użytkownika
                if (empty($dane_pasazera_cache['imie'])) {
                    $dane_pasazera_cache = array(
                        'imie' => $imie,
                        'nazwisko' => $nazwisko,
                        'rok_urodzenia' => get_user_meta(intval($w['klient_id']), 'srl_rok_urodzenia', true),
                        'telefon' => get_user_meta(intval($w['klient_id']), 'srl_telefon', true),
                        'kategoria_wagowa' => get_user_meta(intval($w['klient_id']), 'srl_kategoria_wagowa', true),
                        'sprawnosc_fizyczna' => get_user_meta(intval($w['klient_id']), 'srl_sprawnosc_fizyczna', true),
                        'uwagi' => get_user_meta(intval($w['klient_id']), 'srl_uwagi', true)
                    );
                }
            }
        } elseif ($w['status'] === 'Prywatny' && !empty($w['notatka'])) {
            // Dla lotów prywatnych pobierz dane z notatki
            $dane_prywatne = json_decode($w['notatka'], true);
            if ($dane_prywatne && isset($dane_prywatne['imie']) && isset($dane_prywatne['nazwisko'])) {
                $klient_nazwa = $dane_prywatne['imie'] . ' ' . $dane_prywatne['nazwisko'];
            }
        }
        
        $noweWgPilota[$pid][] = array(
            'id'               => intval($w['id']),
            'start'            => substr($w['godzina_start'], 0, 5),
            'koniec'           => substr($w['godzina_koniec'], 0, 5),
            'status'           => $w['status'],
            'klient_id'        => intval($w['klient_id']),
            'klient_nazwa'     => $klient_nazwa,
            'link_zamowienia'  => $link_zamowienia,
            'lot_id'           => $w['lot_id'] ? intval($w['lot_id']) : null,
            'notatka'          => $w['notatka'],
            'dane_pasazera_cache' => $dane_pasazera_cache // NOWE: pełne dane dla harmonogramu
        );
    }

    wp_send_json_success(array(
        'godziny_wg_pilota' => $noweWgPilota
    ));
}

// Rejestracja AJAX handlerów dla voucherów
add_action('wp_ajax_srl_wykorzystaj_voucher', 'srl_ajax_wykorzystaj_voucher');
// add_action('wp_ajax_nopriv_srl_ajax_login', 'srl_ajax_login');
// add_action('wp_ajax_nopriv_srl_ajax_register', 'srl_ajax_register');

// Wyczyść opcję tworzenia tabeli voucherów
//delete_option('srl_voucher_table_created');


// Ustaw prawidłową wersję bazy
update_option('srl_db_version', '1.0');



// AJAX: Dodaj voucher ręcznie
add_action('wp_ajax_srl_dodaj_voucher_recznie', 'srl_ajax_dodaj_voucher_recznie');
function srl_ajax_dodaj_voucher_recznie() {
    if (!wp_verify_nonce($_POST['nonce'], 'srl_admin_nonce') || !current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
    }
    
    $kod_vouchera = sanitize_text_field($_POST['kod_vouchera']);
    $data_waznosci = sanitize_text_field($_POST['data_waznosci']);
    
    if (empty($kod_vouchera) || empty($data_waznosci)) {
        wp_send_json_error('Wypełnij wszystkie pola.');
    }
    
    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_vouchery_upominkowe';
    
    // Sprawdź czy kod już istnieje
    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $tabela WHERE kod_vouchera = %s",
        $kod_vouchera
    ));
    
    if ($exists > 0) {
        wp_send_json_error('Voucher o tym kodzie już istnieje.');
    }
    
    $user_id = get_current_user_id();
    $user = get_userdata($user_id);
    
    $result = $wpdb->insert(
        $tabela,
        array(
            'order_item_id' => 0,
            'order_id' => 0,
            'buyer_user_id' => $user_id,
            'buyer_imie' => $user->first_name ?: 'Admin',
            'buyer_nazwisko' => $user->last_name ?: 'Manual',
            'nazwa_produktu' => 'Voucher dodany ręcznie',
            'kod_vouchera' => $kod_vouchera,
            'status' => 'do_wykorzystania',
            'data_zakupu' => current_time('mysql'),
            'data_waznosci' => $data_waznosci
        ),
        array('%d','%d','%d','%s','%s','%s','%s','%s','%s','%s')
    );
    
    if ($result !== false) {
        wp_send_json_success('Voucher został dodany.');
    } else {
        wp_send_json_error('Błąd zapisu do bazy danych.');
    }
}

// AJAX: Wyszukaj dostępnych klientów z lotami
add_action('wp_ajax_srl_wyszukaj_dostepnych_klientow', 'srl_ajax_wyszukaj_dostepnych_klientow');
function srl_ajax_wyszukaj_dostepnych_klientow() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }
    
    $query = sanitize_text_field($_POST['query']);
    
    if (strlen($query) < 2) {
        wp_send_json_success(array());
        return;
    }
    
    global $wpdb;
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Wyszukaj dostępne loty (status = 'wolny')
    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT zl.id as lot_id, zl.nazwa_produktu, zl.user_id,
                u.user_email, u.display_name,
                CONCAT(u.display_name, ' (', u.user_email, ')') as nazwa
         FROM $tabela_loty zl
         INNER JOIN {$wpdb->users} u ON zl.user_id = u.ID
         WHERE zl.status = 'wolny' 
         AND zl.data_waznosci >= CURDATE()
         AND (u.user_email LIKE %s 
              OR u.display_name LIKE %s 
              OR zl.id LIKE %s
              OR get_user_meta(u.ID, 'srl_telefon', true) LIKE %s)
         ORDER BY u.display_name
         LIMIT 20",
        '%' . $query . '%',
        '%' . $query . '%',
        '%' . $query . '%',
        '%' . $query . '%'
    ), ARRAY_A);
    
    $wynik = array();
    foreach ($results as $row) {
        $telefon = get_user_meta($row['user_id'], 'srl_telefon', true);
        $wynik[] = array(
            'lot_id' => $row['lot_id'],
            'user_id' => $row['user_id'],
            'nazwa' => $row['display_name'] . ' (' . $row['user_email'] . ')' . ($telefon ? ' - ' . $telefon : ''),
            'produkt' => $row['nazwa_produktu']
        );
    }
    
    wp_send_json_success($wynik);
}

// AJAX: Przypisz klienta do slotu
add_action('wp_ajax_srl_przypisz_klienta_do_slotu', 'srl_ajax_przypisz_klienta_do_slotu');
function srl_ajax_przypisz_klienta_do_slotu() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }
    
    $termin_id = intval($_POST['termin_id']);
    $lot_id = intval($_POST['lot_id']);
    
    global $wpdb;
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Sprawdź czy slot istnieje i jest wolny
    $slot = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $tabela_terminy WHERE id = %d AND status = 'Wolny'",
        $termin_id
    ), ARRAY_A);
    
    if (!$slot) {
        wp_send_json_error('Slot nie istnieje lub nie jest dostępny.');
        return;
    }
    
    // Sprawdź czy lot istnieje i jest wolny
    $lot = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $tabela_loty WHERE id = %d AND status = 'wolny'",
        $lot_id
    ), ARRAY_A);
    
    if (!$lot) {
        wp_send_json_error('Lot nie istnieje lub nie jest dostępny.');
        return;
    }
    
    // Rozpocznij transakcję
    $wpdb->query('START TRANSACTION');
    
    try {
        // Aktualizuj slot
        $update_slot = $wpdb->update(
            $tabela_terminy,
            array(
                'status' => 'Zarezerwowany',
                'klient_id' => $lot['user_id']
            ),
            array('id' => $termin_id),
            array('%s', '%d'),
            array('%d')
        );
        
        if ($update_slot === false) {
            throw new Exception('Błąd aktualizacji slotu.');
        }
        
        // Aktualizuj lot
        $update_lot = $wpdb->update(
            $tabela_loty,
            array(
                'status' => 'zarezerwowany',
                'data_rezerwacji' => current_time('mysql'),
                'termin_id' => $termin_id
            ),
            array('id' => $lot_id),
            array('%s', '%s', '%d'),
            array('%d')
        );
        
        if ($update_lot === false) {
            throw new Exception('Błąd aktualizacji lotu.');
        }
        
        // Zatwierdź transakcję
        $wpdb->query('COMMIT');
        
        wp_send_json_success('Klient został przypisany do slotu.');
        
    } catch (Exception $e) {
        $wpdb->query('ROLLBACK');
        wp_send_json_error('Błąd: ' . $e->getMessage());
    }
}

// AJAX: Zapisz dane prywatne
add_action('wp_ajax_srl_zapisz_dane_prywatne', 'srl_ajax_zapisz_dane_prywatne');
function srl_ajax_zapisz_dane_prywatne() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }
    
    $termin_id = intval($_POST['termin_id']);
    $imie = sanitize_text_field($_POST['imie']);
    $nazwisko = sanitize_text_field($_POST['nazwisko']);
    $rok_urodzenia = intval($_POST['rok_urodzenia']);
    $telefon = sanitize_text_field($_POST['telefon']);
    $sprawnosc_fizyczna = sanitize_text_field($_POST['sprawnosc_fizyczna']);
    $kategoria_wagowa = sanitize_text_field($_POST['kategoria_wagowa']);
    $uwagi = sanitize_textarea_field($_POST['uwagi']);
    
    // Walidacja
	if (empty($imie) || empty($nazwisko) || empty($telefon) || $rok_urodzenia < 1920) {
		wp_send_json_error('Wypełnij wszystkie wymagane pola.');
		return;
	}

	// Walidacja numeru telefonu
	$telefon_clean = str_replace([' ', '-', '(', ')', '+48'], '', $telefon);
	if (strlen($telefon_clean) < 9) {
		wp_send_json_error('Numer telefonu musi mieć minimum 9 cyfr.');
		return;
	}
    
    // Przygotuj dane do zapisu
    $dane_pasazera = array(
        'imie' => $imie,
        'nazwisko' => $nazwisko,
        'rok_urodzenia' => $rok_urodzenia,
        'telefon' => $telefon,
        'sprawnosc_fizyczna' => $sprawnosc_fizyczna,
        'kategoria_wagowa' => $kategoria_wagowa,
        'uwagi' => $uwagi,
        'typ' => 'prywatny'
    );
    
    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_terminy';
    
    // Zaktualizuj slot na "Prywatny" z danymi
    $result = $wpdb->update(
        $tabela,
        array(
            'status' => 'Prywatny',
            'notatka' => json_encode($dane_pasazera)
        ),
        array('id' => $termin_id),
        array('%s', '%s'),
        array('%d')
    );
    
    if ($result !== false) {
        wp_send_json_success('Dane zostały zapisane.');
    } else {
        wp_send_json_error('Błąd zapisu do bazy danych.');
    }
}

// AJAX: Pobierz dane prywatne z notatki
add_action('wp_ajax_srl_pobierz_dane_prywatne', 'srl_ajax_pobierz_dane_prywatne');
function srl_ajax_pobierz_dane_prywatne() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
        return;
    }
    
    $termin_id = intval($_POST['termin_id']);
    
    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_terminy';
    
    $notatka = $wpdb->get_var($wpdb->prepare(
        "SELECT notatka FROM $tabela WHERE id = %d",
        $termin_id
    ));
    
    if ($notatka) {
        $dane = json_decode($notatka, true);
        if ($dane && is_array($dane)) {
            wp_send_json_success($dane);
        } else {
            wp_send_json_error('Nieprawidłowe dane.');
        }
    } else {
        wp_send_json_error('Brak danych.');
    }
}

// AJAX: Pobierz aktualne godziny (dla synchronizacji w tle)
add_action('wp_ajax_srl_pobierz_aktualne_godziny', 'srl_ajax_pobierz_aktualne_godziny');
function srl_ajax_pobierz_aktualne_godziny() {
    if (!wp_verify_nonce($_POST['nonce'] ?? $_GET['nonce'], 'srl_admin_nonce') || !current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
    }
    
    $data = sanitize_text_field($_GET['data'] ?? $_POST['data']);
    if (!$data) {
        wp_send_json_error('Brak daty.');
    }
    
    srl_zwroc_godziny_wg_pilota($data);
}

// AJAX: Wyszukaj wolne loty
add_action('wp_ajax_srl_wyszukaj_wolne_loty', 'srl_ajax_wyszukaj_wolne_loty');
function srl_ajax_wyszukaj_wolne_loty() {
    if (!wp_verify_nonce($_POST['nonce'], 'srl_admin_nonce') || !current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
    }
    
    $search_field = sanitize_text_field($_POST['search_field']);
    $query = sanitize_text_field($_POST['query']);
    
    if (strlen($query) < 2) {
        wp_send_json_success(array());
        return;
    }
    
    global $wpdb;
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Buduj WHERE clause na podstawie pola wyszukiwania
    $where_conditions = array("zl.status = 'wolny'", "zl.data_waznosci >= CURDATE()");
    $where_params = array();
    
    switch ($search_field) {
        case 'id_lotu':
            $where_conditions[] = "zl.id = %s";
            $where_params[] = $query;
            break;
        case 'id_zamowienia':
            $where_conditions[] = "zl.order_id = %s";
            $where_params[] = $query;
            break;
        case 'email':
            $where_conditions[] = "u.user_email LIKE %s";
            $where_params[] = '%' . $query . '%';
            break;
        case 'telefon':
            $where_conditions[] = "EXISTS (SELECT 1 FROM {$wpdb->usermeta} um WHERE um.user_id = zl.user_id AND um.meta_key = 'srl_telefon' AND um.meta_value LIKE %s)";
            $where_params[] = '%' . $query . '%';
            break;
        case 'imie_nazwisko':
            $where_conditions[] = "(zl.imie LIKE %s OR zl.nazwisko LIKE %s OR CONCAT(zl.imie, ' ', zl.nazwisko) LIKE %s)";
            $search_param = '%' . $query . '%';
            $where_params = array_merge($where_params, [$search_param, $search_param, $search_param]);
            break;
        case 'login':
            $where_conditions[] = "u.user_login LIKE %s";
            $where_params[] = '%' . $query . '%';
            break;
        default: // wszedzie
            $where_conditions[] = "(zl.id LIKE %s OR zl.order_id LIKE %s OR zl.imie LIKE %s OR zl.nazwisko LIKE %s OR zl.nazwa_produktu LIKE %s OR u.user_email LIKE %s OR u.user_login LIKE %s OR EXISTS (SELECT 1 FROM {$wpdb->usermeta} um WHERE um.user_id = zl.user_id AND um.meta_key = 'srl_telefon' AND um.meta_value LIKE %s))";
            $search_param = '%' . $query . '%';
            $where_params = array_merge($where_params, [$query, $query, $search_param, $search_param, $search_param, $search_param, $search_param, $search_param]);
            break;
    }
    
    $where_clause = 'WHERE ' . implode(' AND ', $where_conditions);
    
    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT zl.id as lot_id, zl.order_id, zl.user_id, zl.imie, zl.nazwisko, 
                CONCAT(zl.imie, ' ', zl.nazwisko) as klient_nazwa,
                u.user_email as email,
                (SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = zl.user_id AND meta_key = 'srl_telefon') as telefon
         FROM $tabela_loty zl
         INNER JOIN {$wpdb->users} u ON zl.user_id = u.ID
         $where_clause
         ORDER BY zl.data_zakupu DESC
         LIMIT 20",
        ...$where_params
    ), ARRAY_A);
    
    wp_send_json_success($results);
}

// AJAX: Przypisz wykupiony lot
add_action('wp_ajax_srl_przypisz_wykupiony_lot', 'srl_ajax_przypisz_wykupiony_lot');
function srl_ajax_przypisz_wykupiony_lot() {
    if (!wp_verify_nonce($_POST['nonce'], 'srl_admin_nonce') || !current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
    }
    
    $termin_id = intval($_POST['termin_id']);
    $lot_id = intval($_POST['lot_id']);
    
    global $wpdb;
    $tabela_terminy = $wpdb->prefix . 'srl_terminy';
    $tabela_loty = $wpdb->prefix . 'srl_zakupione_loty';
    
    // Rozpocznij transakcję
    $wpdb->query('START TRANSACTION');
    
    try {
        // Sprawdź czy slot jest wolny
        $slot = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $tabela_terminy WHERE id = %d AND status = 'Wolny'",
            $termin_id
        ), ARRAY_A);
        
        if (!$slot) {
            throw new Exception('Slot nie jest dostępny.');
        }
        
        // Sprawdź czy lot jest wolny
        $lot = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $tabela_loty WHERE id = %d AND status = 'wolny'",
            $lot_id
        ), ARRAY_A);
        
        if (!$lot) {
            throw new Exception('Lot nie jest dostępny.');
        }
        
        // Aktualizuj slot
        $wpdb->update(
            $tabela_terminy,
            array(
                'status' => 'Zarezerwowany',
                'klient_id' => $lot['user_id']
            ),
            array('id' => $termin_id),
            array('%s', '%d'),
            array('%d')
        );
        
        // Aktualizuj lot
        $wpdb->update(
            $tabela_loty,
            array(
                'status' => 'zarezerwowany',
                'data_rezerwacji' => current_time('mysql'),
                'termin_id' => $termin_id
            ),
            array('id' => $lot_id),
            array('%s', '%s', '%d'),
            array('%d')
        );
        
        $wpdb->query('COMMIT');
        wp_send_json_success('Lot został przypisany.');
        
    } catch (Exception $e) {
        $wpdb->query('ROLLBACK');
        wp_send_json_error($e->getMessage());
    }
}

// AJAX: Zapisz lot prywatny
add_action('wp_ajax_srl_zapisz_lot_prywatny', 'srl_ajax_zapisz_lot_prywatny');
function srl_ajax_zapisz_lot_prywatny() {
    if (!wp_verify_nonce($_POST['nonce'], 'srl_admin_nonce') || !current_user_can('manage_options')) {
        wp_send_json_error('Brak uprawnień.');
    }
    
    $termin_id = intval($_POST['termin_id']);
    $imie = sanitize_text_field($_POST['imie']);
    $nazwisko = sanitize_text_field($_POST['nazwisko']);
    $rok_urodzenia = intval($_POST['rok_urodzenia']);
    $telefon = sanitize_text_field($_POST['telefon']);
    $sprawnosc_fizyczna = sanitize_text_field($_POST['sprawnosc_fizyczna']);
    $kategoria_wagowa = sanitize_text_field($_POST['kategoria_wagowa']);
    $uwagi = sanitize_textarea_field($_POST['uwagi']);
    
    // Walidacja
	if (empty($imie) || empty($nazwisko) || empty($telefon) || $rok_urodzenia < 1920) {
		wp_send_json_error('Wypełnij wszystkie wymagane pola.');
		return;
	}

	// Walidacja numeru telefonu
	$telefon_clean = str_replace([' ', '-', '(', ')', '+48'], '', $telefon);
	if (strlen($telefon_clean) < 9) {
		wp_send_json_error('Numer telefonu musi mieć minimum 9 cyfr.');
		return;
	}
    
    // Przygotuj dane do zapisu
    $dane_pasazera = array(
        'imie' => $imie,
        'nazwisko' => $nazwisko,
        'rok_urodzenia' => $rok_urodzenia,
        'telefon' => $telefon,
        'sprawnosc_fizyczna' => $sprawnosc_fizyczna,
        'kategoria_wagowa' => $kategoria_wagowa,
        'uwagi' => $uwagi,
        'typ' => 'prywatny'
    );
    
    global $wpdb;
    $tabela = $wpdb->prefix . 'srl_terminy';
    
    // Zaktualizuj slot na "Prywatny" z danymi
    $result = $wpdb->update(
        $tabela,
        array(
            'status' => 'Prywatny',
            'notatka' => json_encode($dane_pasazera)
        ),
        array('id' => $termin_id),
        array('%s', '%s'),
        array('%d')
    );
    
    if ($result !== false) {
        wp_send_json_success('Lot prywatny został zapisany.');
    } else {
        wp_send_json_error('Błąd zapisu do bazy danych.');
    }
}